scalar DateTime

type Query {
  feed(filter: String, skip: Int, orderBy: String, ids: [ID!]): [Article]!
  categories(filter: String): [Category]!
  article(id: ID!, orderBy: String): Article
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createArticle(title: String!, categoryIds: [String!]!, paragraphes: [String!]!): Article
  deleteArticle(id: ID!): Article
  addParagraph(content: String!, articleId: Int!): Paragraph
  updateParagraph(id: ID!, content: String!): Paragraph
  deleteParagraph(id: ID!): Paragraph
  changeParagraphOrder(paragraphes: [String!]!): [Paragraph]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
}

type Paragraph {
  id: ID!
  content: String!
  order: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  article: Article!
}

type Article {
  id: ID!
  title: String!
  categories: [Category!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  paragraphes: [Paragraph!]!
}

type Category {
  id: ID!
  slug: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}